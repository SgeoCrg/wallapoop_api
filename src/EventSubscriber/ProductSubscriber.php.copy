<?php

namespace App\EventSubscriber;

use App\Entity\Product;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ViewEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\Security\Core\Security;

class ProductSubscriber implements EventSubscriberInterface
{
    private Security $security;

    public function __construct(Security $security) {
        $this->security = $security;
    }

    public function onKernelView(ViewEvent $event): void
    {
        $controllerResult = $event->getControllerResult();

        if($controllerResult instanceof Product) {
            $this->setMineFlag($cntrollerResult);
        } elseif(is_iterable($controllerResult)) {
            foreach($controllerResult as $product) {
                if($product instanceof Product) {
                    $this->setMineFlag($product);
                }
            }
        }
    }

    public function setMineFlag(Prodcut $product) {
        $currentUser = $this->security->getUser();
        $prodcutOwner = $prodcut->getUser();
        if($currentUser && $prodcutOwner && $currentUser->getId() === $productOwner->getId()) {
            $product->setMine(true);
        }
    }

    public static function getSubscribedEvents(): array
    {
        return [
            ViewEvent::class => 'onKernelView',
        ];
    }
}
